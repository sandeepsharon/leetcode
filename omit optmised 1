void swap(int*, int*); // swap declaration
int omit(int*, int, int); // omit declaration
int main() {
    int num[] = {8,4,6,4,4,1,2,4,5,5,4};
    int k = 4;
    int length = sizeof(num)/sizeof(num[0]);
    int index = omit(num, k, length);
    std::cout << index <<std::endl;
    //Print Array
    for (int i=0;i<length;i++) {
        std::cout << num[i];
    }
}
//omit definition
int omit(int *num, int k, int length){
    int i=0, j=i+1;
    // find k value
    while(i<length && num[i] != k) {
        i++;    
        }
    // find non-k value
    while(j < length) {
        if(num[j]!=k) {
            swap(num+i, num+j); //swap k with non-k
            i++;
        }
        j++;
    }
    return std::max(0, i-1);
}
//swap definition
void swap(int *start, int *end) {
    int temp = *start;
    *start = *end;
    *end = temp;
}
